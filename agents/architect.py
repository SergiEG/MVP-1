# agents/architect.py

import sqlite3
from datetime import datetime
from pathlib import Path

DB_PATH = Path(__file__).parent.parent / "agent_data.db"

class ArchitectAgent:
    """
    AI-–∞–≥–µ–Ω—Ç ¬´–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä-–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä¬ª
    –•—Ä–∞–Ω–∏—Ç –∑–∞–¥–∞—á–∏ –∏ –ø–∞–º—è—Ç—å –≤ SQLite –∏ —É–º–µ–µ—Ç –∏—Ö –æ—á–∏—â–∞—Ç—å.
    """

    def __init__(self):
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º (–∏–ª–∏ —Å–æ–∑–¥–∞—ë–º) —Ñ–∞–π–ª –±–∞–∑—ã —Ä—è–¥–æ–º —Å –ø—Ä–æ–µ–∫—Ç–æ–º
        self.conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        self._init_db()

    def _init_db(self):
        """–°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É tasks, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        cur = self.conn.cursor()
        cur.execute("""
            CREATE TABLE IF NOT EXISTS tasks (
                id        INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp TEXT    NOT NULL,
                command   TEXT    NOT NULL
            )
        """)
        self.conn.commit()

    def respond_to_command(self, command: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
        now = datetime.now().isoformat()
        cur = self.conn.cursor()
        cur.execute(
            "INSERT INTO tasks (timestamp, command) VALUES (?,?)",
            (now, command)
        )
        self.conn.commit()
        return f"–Ø –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É ¬´{command}¬ª –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ."

    def list_tasks(self) -> list[tuple]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ tasks: [(id, timestamp, command), ...]."""
        cur = self.conn.cursor()
        cur.execute("SELECT id, timestamp, command FROM tasks ORDER BY id")
        return cur.fetchall()

    def show_memory(self) -> list[tuple]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ –∂–µ –∑–∞–ø–∏—Å–∏, —á—Ç–æ list_tasks().
        –û—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è memory ‚Üî tasks.
        """
        return self.list_tasks()

    def run_diagnostic(self) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î."""
        try:
            self.conn.execute("SELECT 1")
            return "‚úÖ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}"

    def clear_tasks(self) -> str:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ tasks."""
        cur = self.conn.cursor()
        cur.execute("DELETE FROM tasks")
        self.conn.commit()
        return "üóëÔ∏è –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –æ—á–∏—â–µ–Ω."

    def clear_memory(self) -> str:
        """
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–∞–º—è—Ç–∏.
        –ü–æ–∫–∞ memory == tasks, –¥—É–±–ª–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ.
        """
        return self.clear_tasks()
